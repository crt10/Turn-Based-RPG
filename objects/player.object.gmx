<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentxspeed = 0;
currentyspeed = 0;
walkspeed = 3;
xspeed = 0;
yspeed = 0;
xdir_switch = true;
ydir_switch = true;
if (global.battled)
{
    view_xview[0] = (global.returnx-(view_wview[0]/2) - view_xview[0]);
    view_yview[0] = (global.returny-(view_hview[0]/2) - view_yview[0]);
    x = global.returnx;
    y = global.returny;
}
for (var i = 0; i &lt; 64; i++)
{
    xpos[i] = x;
    ypos[i] = y;
}
//abs(xpos[0] - floor(x)) &gt;= global.delta*48 || abs(ypos[0] - floor(y)) &gt;= global.delta*48
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.pause &amp;&amp; !global.transition)
{

//x movement
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);
if (right &amp;&amp; !left)
{
    xspeed = walkspeed;
    currentxspeed = xspeed;
    xdir_switch = true;
}
else if (left &amp;&amp; !right)
{
    xspeed = walkspeed*-1;
    currentxspeed = xspeed;
    xdir_switch = true;
}
if (left &amp;&amp; right &amp;&amp; xdir_switch)
{
    xdir_switch = false;
    if (xspeed &lt; 0)
    {
        xspeed = walkspeed;
        currentxspeed = xspeed;
    }
    else if (xspeed &gt; 0)
    {
        xspeed = walkspeed*-1;
        currentxspeed = xspeed;
    }
    else
    {
        xspeed = -1*currentxspeed;
    }
}
else if (!left &amp;&amp; !right)
{
    xspeed = 0;
    xdir_switch = true;
}

//y movement
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
if (down &amp;&amp; !up)
{
    yspeed = walkspeed;
    currentyspeed = yspeed;
    ydir_switch = true;
}
else if (up &amp;&amp; !down)
{
    yspeed = walkspeed*-1;
    currentyspeed = yspeed;
    ydir_switch = true;
}
if (up &amp;&amp; down &amp;&amp; ydir_switch)
{
    ydir_switch = false;
    if (yspeed &lt; 0)
    {
        yspeed = walkspeed;
        currentyspeed = yspeed;
    }
    else if (yspeed &gt; 0)
    {
        yspeed = walkspeed*-1;
        currentyspeed = yspeed;
    }
    else
    {
        yspeed = -1*currentyspeed;
    }
}
else if (!up &amp;&amp; !down)
{
    yspeed = 0;
    ydir_switch = true;
}

//collisions
if (place_meeting(x,y + yspeed,block))
{
    while (!place_meeting(x,y + sign(yspeed),block))
    {
        y += sign(yspeed);
    }
    yspeed = 0;
}

y += yspeed * global.delta;

if (place_meeting(x + xspeed,y,block))
{
    while (!place_meeting(x + sign(xspeed),y,block))
    {
        x += sign(xspeed);
    }
    xspeed = 0;
}

x += xspeed * global.delta;

//follow
if (xpos[0] != x || ypos[0] != y)
{
    for (var i = 63; i &gt; 0; i--)
    {
        xpos[i] = xpos[i-1];
        ypos[i] = ypos[i-1];
    }
    xpos[0] = x;
    ypos[0] = y;
}

}
//camera
view_xview[0] += (x-(view_wview[0]/2) - view_xview[0]) * 0.1 * global.delta;
view_yview[0] += (y-(view_hview[0]/2) - view_yview[0]) * 0.1 * global.delta;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
